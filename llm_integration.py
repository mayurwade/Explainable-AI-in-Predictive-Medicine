# -*- coding: utf-8 -*-
"""llm_integration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10QokBLBFeutfDg0ZpNYX-xPowFwiYkPp
"""

"""
LLM Integration Module using Google Gemini API for Clinical Insights
"""
import os
import json
from typing import Dict, List, Tuple
import google.generativeai as genai
import time

class GeminiLLMInsightGenerator:
    """
    LLM Insight Generator using Google Gemini API for medical insights.
    """

    def __init__(self, api_key=None):
        """
        Initialize Gemini API client.

        Args:
            api_key (str): Google Gemini API key. If None, will try to get from environment.
        """
        # Get API key
        if api_key is None:
            api_key = os.getenv('AIzaSyBymUGKzaxNDl1gxTG_fiR-RXN9Kj-TJXU')
            if api_key is None:
                raise ValueError(
                    "Gemini API key not provided. Please set GEMINI_API_KEY environment variable "
                    "or pass api_key parameter."
                )

        # Configure Gemini
        genai.configure(api_key=api_key)

        # Initialize model
        self.model = genai.GenerativeModel('gemini-pro')

        # Safety settings for medical content
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_MEDICAL",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]

        # Generation config
        self.generation_config = {
            "temperature": 0.3,  # Lower temperature for more consistent medical advice
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 2048,
        }

        print("âœ… Gemini LLM Insight Generator initialized successfully")

    def generate_patient_summary(self, patient_data: Dict,
                                prediction: int,
                                probability: Tuple[float, float]) -> str:
        """
        Generate a comprehensive clinical summary using Gemini API.
        """
        risk_percentage = probability[1] * 100
        risk_level = self._determine_risk_level(risk_percentage)

        # Create structured prompt for medical analysis
        prompt = self._create_medical_prompt(patient_data, risk_level, risk_percentage)

        try:
            # Generate response using Gemini
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )

            # Format the response
            formatted_response = self._format_medical_response(
                response.text, patient_data, risk_level, risk_percentage
            )

            return formatted_response

        except Exception as e:
            print(f"Error generating summary with Gemini: {e}")
            # Fallback to template-based response
            return self._generate_fallback_summary(patient_data, risk_level, risk_percentage)

    def _determine_risk_level(self, risk_percentage: float) -> str:
        """Determine risk level based on probability."""
        if risk_percentage >= 70:
            return "HIGH"
        elif risk_percentage >= 40:
            return "MODERATE"
        else:
            return "LOW"

    def _create_medical_prompt(self, patient_data: Dict, risk_level: str, risk_percentage: float) -> str:
        """Create a structured prompt for medical analysis."""

        # Extract key clinical data
        clinical_data = {
            'demographics': {
                'age': patient_data['Age'],
                'gender': 'Male' if patient_data['Gender'] == 1 else 'Female',
                'bmi': round(patient_data['BMI'], 1)
            },
            'comorbidities': {
                'diabetes': bool(patient_data.get('Diabetes Mellitus (DM)', 0)),
                'hyperlipidemia': bool(patient_data.get('Hyperlipidemia', 0)),
                'cad': bool(patient_data.get('Coronary Artery Disease (CAD)', 0)),
                'hypothyroidism': bool(patient_data.get('Hypothyroidism', 0))
            },
            'laboratory': {
                'total_cholesterol': patient_data.get('Total Cholesterol', 'N/A'),
                'hdl': patient_data.get('High Density Lipoprotein (HDL)', 'N/A'),
                'ldl': patient_data.get('Low Density Lipoprotein (LDL)', 'N/A'),
                'triglycerides': patient_data.get('Triglyceride', 'N/A'),
                'ast': patient_data.get('Aspartat Aminotransferaz (AST)', 'N/A'),
                'alt': patient_data.get('Alanin Aminotransferaz (ALT)', 'N/A'),
                'crp': patient_data.get('C-Reactive Protein (CRP)', 'N/A'),
                'vitamin_d': patient_data.get('Vitamin D', 'N/A')
            }
        }

        prompt = f"""
You are a clinical decision support system providing analysis for gallstone disease risk assessment.

PATIENT PROFILE:
- Age: {clinical_data['demographics']['age']} years
- Gender: {clinical_data['demographics']['gender']}
- BMI: {clinical_data['demographics']['bmi']} kg/mÂ²

MEDICAL HISTORY:
- Diabetes Mellitus: {'Yes' if clinical_data['comorbidities']['diabetes'] else 'No'}
- Hyperlipidemia: {'Yes' if clinical_data['comorbidities']['hyperlipidemia'] else 'No'}
- Coronary Artery Disease: {'Yes' if clinical_data['comorbidities']['cad'] else 'No'}
- Hypothyroidism: {'Yes' if clinical_data['comorbidities']['hypothyroidism'] else 'No'}

LABORATORY VALUES:
- Total Cholesterol: {clinical_data['laboratory']['total_cholesterol']} mg/dL
- HDL Cholesterol: {clinical_data['laboratory']['hdl']} mg/dL
- LDL Cholesterol: {clinical_data['laboratory']['ldl']} mg/dL
- Triglycerides: {clinical_data['laboratory']['triglycerides']} mg/dL
- AST: {clinical_data['laboratory']['ast']} U/L
- ALT: {clinical_data['laboratory']['alt']} U/L
- CRP: {clinical_data['laboratory']['crp']} mg/L
- Vitamin D: {clinical_data['laboratory']['vitamin_d']} ng/mL

RISK ASSESSMENT RESULT:
- Risk Level: {risk_level} RISK
- Probability: {risk_percentage:.1f}%

Please provide a comprehensive clinical analysis including:

1. **Risk Factor Analysis**: Identify and explain the significance of present risk factors
2. **Clinical Interpretation**: Interpret the risk assessment in clinical context
3. **Evidence-Based Recommendations**: Provide specific, actionable clinical recommendations
4. **Follow-up Strategy**: Suggest appropriate monitoring and follow-up schedule
5. **Patient Education**: Key points for patient counseling

Format your response professionally for healthcare providers. Be specific about clinical actions and timeframes. Base recommendations on current clinical guidelines for gallstone disease management.

IMPORTANT: This is for clinical decision support only. All recommendations should emphasize the need for clinical judgment and individualized patient care.
"""

        return prompt

    def _format_medical_response(self, response_text: str, patient_data: Dict,
                                risk_level: str, risk_percentage: float) -> str:
        """Format the Gemini response for display."""

        header = f"""### ðŸ“‹ AI-Generated Clinical Assessment Summary

**Risk Classification:** {risk_level} RISK ({risk_percentage:.1f}% probability)
**Patient:** {patient_data['Age']}-year-old {'Male' if patient_data['Gender'] == 1 else 'Female'} (BMI: {patient_data['BMI']:.1f})

---

"""

        # Clean and format the response
        formatted_content = response_text.replace("**", "**").replace("##", "####")

        footer = f"""

---

**Disclaimer:** This analysis is generated by AI for clinical decision support purposes only. All recommendations should be interpreted within the context of individual patient circumstances and clinical judgment. Consult current clinical guidelines and consider specialist referral as appropriate.

**Generated by:** Google Gemini Pro API
**Timestamp:** {time.strftime('%Y-%m-%d %H:%M:%S')}
"""

        return header + formatted_content + footer

    def _generate_fallback_summary(self, patient_data: Dict, risk_level: str, risk_percentage: float) -> str:
        """Generate fallback summary if Gemini API fails."""

        summary = f"""### ðŸ“‹ Clinical Assessment Summary (Fallback Mode)

**Risk Classification:** {risk_level} RISK ({risk_percentage:.1f}% probability)

#### Patient Profile:
- Age: {patient_data['Age']} years
- Gender: {'Male' if patient_data['Gender'] == 1 else 'Female'}
- BMI: {patient_data['BMI']:.1f} kg/mÂ²

#### Risk Factor Analysis:
"""

        # Analyze risk factors
        risk_factors = []
        if patient_data['Age'] > 50:
            risk_factors.append(f"Advanced age ({patient_data['Age']} years)")
        if patient_data['BMI'] > 25:
            risk_factors.append(f"Elevated BMI ({patient_data['BMI']:.1f})")
        if patient_data.get('Diabetes Mellitus (DM)', 0):
            risk_factors.append("Diabetes mellitus present")
        if patient_data.get('Hyperlipidemia', 0):
            risk_factors.append("Hyperlipidemia diagnosed")

        for factor in risk_factors:
            summary += f"- {factor}\n"

        # Add basic recommendations
        if risk_level == "HIGH":
            summary += """
#### Recommendations:
- Consider immediate imaging evaluation
- Gastroenterology consultation recommended
- Close monitoring for symptoms
- Aggressive risk factor modification
"""
        elif risk_level == "MODERATE":
            summary += """
#### Recommendations:
- Regular monitoring and follow-up
- Lifestyle modifications
- Consider imaging if symptoms develop
- Risk factor management
"""
        else:
            summary += """
#### Recommendations:
- Routine preventive care
- Maintain healthy lifestyle
- Standard follow-up schedule
- Patient education on risk factors
"""

        summary += "\n**Note:** Gemini API temporarily unavailable. This is a simplified analysis."

        return summary

    def generate_explanation_narrative(self, feature_importance: List) -> str:
        """Generate narrative explanation using Gemini."""

        # Create prompt for explanation
        features_text = "\n".join([
            f"- {feature}: {importance:.3f} {'(increases risk)' if importance > 0 else '(decreases risk)'}"
            for feature, importance in feature_importance[:10]
        ])

        prompt = f"""
Explain how a machine learning model made its gallstone risk prediction based on these feature importance scores:

{features_text}

Provide a clear, clinical explanation of:
1. Which factors most strongly influence the prediction
2. How these factors relate to gallstone pathophysiology
3. Clinical significance of the top contributing factors

Write for a healthcare audience. Be concise but informative.
"""

        try:
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )

            return f"### ðŸ”¬ Model Decision Analysis\n\n{response.text}"

        except Exception as e:
            print(f"Error generating explanation: {e}")
            # Fallback explanation
            explanation = "### ðŸ”¬ Model Decision Analysis\n\n"
            explanation += "The prediction is based on the following key factors:\n\n"

            for i, (feature, importance) in enumerate(feature_importance[:5], 1):
                direction = "increases" if importance > 0 else "decreases"
                explanation += f"{i}. **{feature}** {direction} risk (weight: {abs(importance):.3f})\n"

            return explanation

    def generate_patient_education(self, risk_level: str, patient_data: Dict) -> str:
        """Generate patient education content using Gemini."""

        prompt = f"""
Create patient education content for a {patient_data['Age']}-year-old {'male' if patient_data['Gender'] == 1 else 'female'}
patient with {risk_level.lower()} risk for gallstone disease.

Include:
1. What are gallstones and why they form
2. Common symptoms to watch for
3. Lifestyle modifications specific to their risk level
4. When to seek medical care
5. Prevention strategies

Write in patient-friendly language while being medically accurate. Be encouraging but realistic about their risk level.
"""

        try:
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config,
                safety_settings=self.safety_settings
            )

            return f"### ðŸ“š Patient Education\n\n{response.text}"

        except Exception as e:
            print(f"Error generating patient education: {e}")
            return self._generate_basic_patient_education(risk_level)

    def _generate_basic_patient_education(self, risk_level: str) -> str:
        """Generate basic patient education as fallback."""

        education = """### ðŸ“š Patient Education

**What are gallstones?**
Gallstones are hardened deposits that form in your gallbladder. They can cause pain and complications if they block bile ducts.

**Common symptoms:**
- Pain in upper right abdomen
- Nausea and vomiting
- Pain between shoulder blades
- Indigestion after fatty meals

**Prevention strategies:**
- Maintain healthy weight
- Eat regular meals
- Choose high-fiber, low-fat foods
- Stay physically active
- Limit refined sugars
"""

        if risk_level == "HIGH":
            education += "\n**For high-risk patients:** Monitor symptoms closely and maintain regular medical follow-up."

        return education

# Compatibility wrapper
class LLMInsightGenerator(GeminiLLMInsightGenerator):
    """Wrapper to maintain compatibility with existing code."""
    pass